{"version":3,"sources":["state/action-types/index.ts","state/reducers/blogReducer.ts","state/reducers/index.ts","state/store.ts","state/action-creators/index.ts","hooks/useTypedSelector.ts","components/CodeBlock.tsx","containers/BlogContainer.tsx","hooks/useActions.ts","index.tsx"],"names":["BlogActionTypes","initialState","loading","error","markdowns","reducers","combineReducers","blogs","state","action","type","FETCH_BLOGS","FETCH_BLOGS_SUCCESS","payload","FETCH_BLOGS_ERROR","store","createStore","applyMiddleware","thunk","fetchBlogActionCreator","dispatch","a","axios","get","data","title","content","useTypedSelector","useSelector","CodeBlock","this","props","language","value","style","dark","PureComponent","BlogContainer","useDispatch","bindActionCreators","actionCreators","useActions","useEffect","map","markdown","plugins","gfm","source","renderers","code","BlogApp","ReactDom","render","document","querySelector"],"mappings":"4LAAYA,E,0DAAAA,K,0BAAAA,E,0CAAAA,E,uCAAAA,M,KCUZ,IAAMC,EAAe,CACjBC,SAAS,EACTC,MAAO,KACPC,UAAY,MCNDC,EAJEC,YAAgB,CAC7BC,MDYuB,WAAqE,IAApEC,EAAmE,uDAAhDP,EAAcQ,EAAkC,uCAE3F,OAAOA,EAAOC,MACV,KAAKV,EAAgBW,YACjB,MAAO,CACHT,SAAS,EACTC,MAAO,KACPC,UAAU,IAElB,KAAKJ,EAAgBY,oBACjB,MAAO,CACHV,SAAS,EACTC,MAAO,KACPC,UAAWK,EAAOI,SAE1B,KAAKb,EAAgBc,kBACjB,MAAO,CACHZ,SAAS,EACTC,MAAOM,EAAOI,QACdT,UAAW,IAEnB,QACI,OAAOI,MEjCNO,EAAQC,YAAYX,EAAU,GAAIY,YAAgBC,M,0CCGlDC,EAAyB,WAClC,8CAAO,WAAOC,GAAP,iBAAAC,EAAA,6DACHD,EAAS,CACLV,KAAMV,EAAgBW,cAFvB,SAOkBW,IAAMC,IAAI,UAP5B,gBAOIC,EAPJ,EAOIA,KAyBPJ,EAAS,CACLV,KAAMV,EAAgBY,oBACtBC,QAAS,CACL,CAACY,MAAM,UAAWC,QAAQF,GAC1B,CAACC,MAAM,YAAaC,QAAQ,gCApCjC,2CAAP,uDCLSC,EAAoDC,I,4ECoBlDC,E,4JAVb,WAAU,IAAD,EACqBC,KAAKC,MAAzBC,EADD,EACCA,SAAUC,EADX,EACWA,MAClB,OACE,cAAC,IAAD,CAAmBD,SAAUA,EAAUE,MAAOC,IAA9C,SACGF,Q,GAVeG,iB,kBC2BTC,EAzBgB,WAAM,IAEzBlB,ECRc,WACtB,IAAMC,EAAWkB,cACjB,OAAOC,YAAmBC,EAAgBpB,GDMPqB,GAA3BtB,uBAERuB,qBAAU,WACNvB,MAEF,IAP8B,MASIQ,GAAiB,SAACnB,GAAD,OAAUA,EAAMD,SAA9DL,EATyB,EASzBA,QAASC,EATgB,EAShBA,MAAOC,EATS,EASTA,UAEvB,OACI,gCACI,0CACCF,GAAW,8CACXC,GAAS,6DACV,8BAESA,IAAUD,GAAWE,GAAaA,EAAUuC,KAAI,SAAAC,GAAQ,OAAI,6BAAyB,cAAC,IAAD,CAAeC,QAAS,CAACC,KAAMC,OAAQH,EAASlB,QAASsB,UAAW,CAACC,KAAKpB,MAA1Fe,EAASnB,gBEvB7FyB,EAAU,WACZ,OACI,cAAC,IAAD,CAAUnC,MAAOA,EAAjB,SACI,cAAC,EAAD,OAKZoC,IAASC,OAAO,cAAC,EAAD,IAAYC,SAASC,cAAc,Y","file":"static/js/main.8bd6ee75.chunk.js","sourcesContent":["export enum BlogActionTypes {\n    FETCH_BLOGS = \"fetch_blogs\",\n    FETCH_BLOGS_SUCCESS = 'fetch_blogs_success',\n    FETCH_BLOGS_ERROR = 'fetch_blogs_error'    \n}","import {BlogActionTypes} from '../action-types';\nimport { BlogActions } from '../actions';\nimport { MarkdownTypeDef } from '../type-defs';\n\ninterface BlogState {\n    loading: boolean;\n    error: string | null;\n    markdowns: MarkdownTypeDef[] | null;\n}\n\nconst initialState = {\n    loading: true,\n    error: null,\n    markdowns : null\n};\n\nexport const blogReducer = (state: BlogState = initialState, action: BlogActions):BlogState => {\n\n    switch(action.type) {\n        case BlogActionTypes.FETCH_BLOGS: \n            return {\n                loading: true,\n                error: null,\n                markdowns:[]\n            };\n        case BlogActionTypes.FETCH_BLOGS_SUCCESS:\n            return {\n                loading: false,\n                error: null,\n                markdowns: action.payload\n            };\n        case BlogActionTypes.FETCH_BLOGS_ERROR:\n            return {\n                loading: false,\n                error: action.payload,\n                markdowns: []\n            };\n        default:\n            return state;\n    }\n};\n\n","import {combineReducers} from 'redux';\nimport { blogReducer } from './blogReducer';\n\nconst reducers = combineReducers({\n    blogs: blogReducer\n});\n\nexport default reducers;\n\nexport type RootState = ReturnType<typeof reducers>;","import {createStore, applyMiddleware} from 'redux';\n\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\n\nexport const store = createStore(reducers, {}, applyMiddleware(thunk)); ","import axios from \"axios\";\nimport { Dispatch } from \"react\"\nimport { BlogActionTypes } from \"../action-types\";\nimport { BlogActions } from \"../actions\"\n// import fs from 'fs';\n// import path from \n\n\nexport const fetchBlogActionCreator = () => {\n    return async( dispatch: Dispatch<BlogActions>) => {\n        dispatch({\n            type: BlogActionTypes.FETCH_BLOGS\n        });\n\n\n        \n        const {data} = await axios.get('git.md')\n      //  fs.readdirSync(\"posts\");\n       //const files = fs.readdirSync (\"posts\");\n        //console.log(files);\n\n        // try {\n\n        //     const {data} = await axios.get('https://github.com/Venkata-Santhosh/my-blog/blob/master/posts/multiple-git-accounts.md');\n        //     // const names = data.objects.map((result: any) => {\n        //     //     return result.package.name\n        //     // })\n\n\n        //     dispatch({\n        //         type: BlogActionTypes.FETCH_BLOGS_SUCCESS,\n        //         payload:data\n        //     })\n\n        // } catch(err) {\n        //     dispatch({\n        //         type: BlogActionTypes.FETCH_BLOGS_ERROR,\n        //         payload: err.message\n        //     })\n        // }\n\n        dispatch({\n            type: BlogActionTypes.FETCH_BLOGS_SUCCESS,\n            payload: [\n                {title:'my blog', content:data},\n                {title:'my blog 2', content:'This is my blog content 2'}\n            ]\n         });\n    }\n    \n};","import { useSelector, TypedUseSelectorHook } from \"react-redux\";\n\nimport {RootState} from '../state';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { PureComponent } from \"react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport {dark} from 'react-syntax-highlighter/dist/esm/styles/prism';\n\ninterface CodeBlockPropType {\n    value:string;\n    language: string;\n}\nclass CodeBlock extends PureComponent<CodeBlockPropType> {\n  \n  // static defaultProps = {\n    // language: null\n  // };\n\n  render() {\n    const { language, value } = this.props;\n    return (\n      <SyntaxHighlighter language={language} style={dark}>\n        {value}\n      </SyntaxHighlighter>\n    );\n  }\n}\n\nexport default CodeBlock;\n","import { useEffect } from \"react\";\nimport { useActions } from \"../hooks/useActions\";\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\nimport ReactMarkdown from 'react-markdown'\n// import {Prism as SyntaxHighlighter} from 'react-syntax-highlighter';\n// import {dark} from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport CodeBlock from \"../components/CodeBlock\";\nimport gfm from 'remark-gfm'\n\n\nconst BlogContainer:React.FC = ()=> {\n\n    const { fetchBlogActionCreator } = useActions(); \n    \n    useEffect(()=> {\n        fetchBlogActionCreator();\n           // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[]);\n\n    const {loading, error, markdowns} = useTypedSelector((state)=> state.blogs);\n          \n    return (\n        <div>\n            <h1>My Blogs</h1>\n            {loading && <h3>Loading ... </h3>}\n            {error && <h3>Error while retrieving blog</h3>}\n            <ul>\n                {\n                    !error && !loading && markdowns && markdowns.map(markdown => <li key={markdown.title}><ReactMarkdown plugins={[gfm]} source={markdown.content} renderers={{code:CodeBlock}}/></li>)\n                }\n            </ul>\n        </div>\n    );\n}\n\nexport default BlogContainer;","import { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { actionCreators } from \"../state\";\n\nexport const useActions = () => {\n    const dispatch = useDispatch();\n    return bindActionCreators(actionCreators, dispatch);\n    // { searchRepositories: dispatch(searchRepositories())}\n}","import ReactDom from 'react-dom';\nimport { Provider } from 'react-redux';\nimport BlogContainer from './containers/BlogContainer';\nimport {store} from './state';\n\nconst BlogApp = () => {\n    return (\n        <Provider store={store}>\n            <BlogContainer/>\n        </Provider>\n    );\n};\n\nReactDom.render(<BlogApp/>, document.querySelector(\"#root\"));\n"],"sourceRoot":""}